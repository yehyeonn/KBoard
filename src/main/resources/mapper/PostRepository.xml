<?xml version="1.0" encoding="UTF-8"?>  <!-- 상단에 xml 규격 필요!-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 추가 -->
<!--        /* insert 를 태그로 생성 , 아이디 필수, 아이디는 정확하게 매소드 이름과 1:1 대응되어야 함!*/-->
<mapper namespace="com.lec.spring.repository.PostRepository">
    <insert id="save" flushCache="true"
            parameterType="com.lec.spring.domain.Post"
    useGeneratedKeys="true" keyColumn="id" keyProperty="id">    /* post 에서 받은 keyColumn을 Property로 출력해줘라! (auto generatic 된 값을 가져오는 법)(막 insert 된 것의 아이디 값)*/
        INSERT INTO t5_post
            (subject, content, user_id)        /* 어떤 쿼리에 입력할 건지 */ /* user는 외래키라 에러남 => user_id로 인서트*/
        VALUES
            (#{subject}, #{content}, #{user.id})   /* Post 의 어떤 걸 선택해 쿼리에 집어 넣을 건지(정확히는 getSubject() 프러퍼티) */
    </insert>

    <update id="incViewCnt" flushCache="true">
        UPDATE t5_post
        SET viewcnt = viewcnt +1
        WHERE id = #{id}        /* ibatis 가 알아서 이름 같은 걸 꽂아넣는다~*/
    </update>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 하고, include 태그로 가져다 쓸수 있다 -->
    <!-- sql 태그 안은 대소분자 구분함 -->

    <sql id="SELECT_BASE">
        SELECT
            p.id "p_id",
            p.subject "p_subject",
            p.content "p_content",
            p.viewcnt "p_viewCnt",
            p.regdate "p_regDate",
            u.id "u_id",
            u.username "u_username",
            u.name "u_name",
            u.email "u_email",
            u.regdate "u_regdate"
        FROM
            t5_post p, t5_user u
        WHERE
            p.user_id = u.id
    </sql>


    <!-- JOIN 문에서 여러 테이블의 데이터를 매핑 받기 -->
    <resultMap id="mapUser" type="com.lec.spring.domain.User">  <!-- property domain.User랑 동일한 이름이어야 함 -->
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_password" property="password"/>   <!-- 없다고 에러는 안 남, 단 null -->
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_regdate" property="regDate"/>

    </resultMap>

    <resultMap id="mapPost" type="com.lec.spring.domain.Post">  <!-- Post 타입으로 받긴 하는데 매핑해서 받음 doamin.Post랑 동일한 이름이어야 함. -->
        <result column="p_id" property="id"/>   <!-- p_id를 Post의 id에 넣어준다 -->
        <result column="p_subject" property="subject"/>
        <result column="p_content" property="content"/>
        <result column="p_viewCnt" property="viewCnt"/>
        <result column="p_regDate" property="regDate"/>
        <collection property="user" resultMap="mapUser"/>   <!--user 타입이 있기 때문에 resultMaP 사용해 프로퍼티 매팅-->
    </resultMap>

    <!-- 글 목록 조회 -->
    <select id="findAll" resultMap="mapPost"> /*Map 필요!*/
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC;
    </select>

    <!-- 특정 id 글 내용 읽기(조회수 증가도!)-->
    <select id="findById" resultMap="mapPost">
      <include refid="SELECT_BASE"/>  /* / 꼭 입력하여 단독 태그로 사용할 것 */
          AND p.id = #{id};
    </select>

    <!-- 수정 -->
    <update id="update" flushCache="true"
        parameterType="com.lec.spring.domain.Post">    /* 매개변수 타입으로 주소 */
           UPDATE t5_post
           SET subject = #{subject}, content = #{content}   /* 매개변수 POST 의 getProperty */
           WHERE id = #{id}
    </update>

    <delete id="delete" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        DELETE FROM t5_post
        WHERE id = #{id}
    </delete>

    <!-- 페이징 용 쿼리 -->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}  /* param1 : int from, param2 : int rows*/
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM t5_post;
    </select>
</mapper>


